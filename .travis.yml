language: generic
env:
  global:
    - COMMIT_AUTHOR_EMAIL="philipp.sommer@unil.ch"
    - secure: "j+oBXMdILpv8JCehj1mMGyT4/F00PMvCaauXOINmVLJxH0rD/QhJu4he7IJ0TnnCx6THP9v4io7eXEWr9bJPwRS+l0/ww0gXduKexMUQ2GCpvUJsypAgSTgqg2rGuakJbLclQnDeZYRON3HaxIjHUl4ooEK032tF8B7TpQPGMhS3cqzrjOz1jNBiFv6QkfcN6ZJkkeb3PCR1U1Q6/dwUUNQcffFyi0RCNoV9OAfYrSYALjtOLQuFioj/iqLMKFSewa5JFC1AlFYIDOWc1/un4rGC4fBFQpM07uonW70qjJSEYlbqOOAX1Xo8GFiFTsrgnELpfxLp7zorLGpj65CpBKMARQQKpmGUiY4D74vK0Uw46q8azqLgGrGxhlJq9NeEd/4jVRtk/1x9jhuAxM1F7Y3t9RxaHdn+zcN+7vMeuUEgv1z7zWZdI3fLxnDH7kKI4AMkjTfvL+PxJn1Mc3v5LBqi/cPn6FOEaOmRg6TXdF/2TgYsVdmBn7dZTYKreA4M0dx2us6D/icy4FKLy1jF2m5YnSU1t4gPX5GtA4CGpl0fjHVrXT3JGrGv8n67uvT34eqJn88XuxXTijYd4TM8tZ2jNCQF0kg3bl1FofssbRDqfsyfKPdMoFjucCAuYgyi+5fNB4klbhf3DTRW8qOUBji+OX08628o/OzsMRQk/wc="
    - secure: "NS0YDRi8ejd9YKCy37/+fxpYRLr0d9MLDnPd8TK/XOCbx0KqaCccEI0PazVTpW86Y2qJUhOMR04ELmbyWLQ2/krVJx49JyzSvZxdv50X5ZbYKTujG39zAvxWMbJDkXDunkoBEujx8laQI36RLGUO31StqTnX7Or+i+RCNsRnbV646l8GVf24URk1yj7tY2aLH0XZCcUPwzKyiHlUOkjcDaC3tyHQmQQ006z2FSASUfJuk/IA8pSAeWrUjWrxSwSroJlMGI03M0+hV8fy+ylPAXeXz/cXERaditRH7KnNXTZ7bGN5VP0DHiXpemxL7L4RRfAhQkzCrWg2dGTzXX3k61kLCwcvtplmNU/qek1sXN9mnEjgQcDSba1VMT8dDN7WJgvQhhT4hXvwvybJamCN8Yf7uy3AerFsV8Mv9NGCjL0PsKa8Db4xt33vFAN0mkuG847+s1Uj8mMyF89KDud/Z1NYc3PeWp4hl+jlvZF/oLLi2DQTkd3ZrE0r2QzQApz6NQEJch0cPMyb7rS7xRJkMT39zvSpYsfXiVEsAdkGovN2IM/7A+3jsntlGDq9fj1fdZPU3ZaTuF/GEAQSYcMWSjS5dqnSwFSCkwJdkIXlSSn6JCcMwCuVKcLKDDAc6BOgo0mgXHQQcPGhDb+mu3wvKh7JRxfBJr+x7JSohFeinPw="
matrix:
    include:
        # linux environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.0
          os: linux
        # osx environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.0
          os: osx

services:
    - xvfb

git:
    submodules: false

before_install:
    - if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then export DEPLOY_CONDA=false; fi
    # Remove homebrew.
    - |
      if [[ $TRAVIS_OS_NAME == "osx" ]]; then
          echo ""
          echo "Removing homebrew from Travis CI to avoid conflicts."
          curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > ~/uninstall_homebrew
          chmod +x ~/uninstall_homebrew
          ~/uninstall_homebrew -fq
          rm ~/uninstall_homebrew
      fi
    # define functions to unset and reset encrypted variables
    - function unset_secure {
          CONDA_TOKEN_SAVE=$CONDA_REPO_TOKEN;
          unset CONDA_REPO_TOKEN;
          GH_REPO_TOKEN_SAVE=$GH_REPO_TOKEN;
          unset GH_REPO_TOKEN;
          }
    - function reset_secure {
          export CONDA_REPO_TOKEN=$CONDA_TOKEN_SAVE;
          export GH_REPO_TOKEN=$GH_REPO_TOKEN_SAVE;
          }
    - unset_secure
    # increase open files limit
    - ulimit -a
    - ulimit -Sn 10000
    - ulimit -a
      # select the os name for the conda installer
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          OS_NAME=MacOSX;
      else
          OS_NAME=Linux;
      fi
    # Install Miniconda.
    - |
      echo ""
      echo "Installing a fresh version of Miniconda."
      MINICONDA_URL="https://repo.continuum.io/miniconda"
      MINICONDA_FILE="Miniconda3-latest-${OS_NAME}-x86_64.sh"
      curl -L -O "${MINICONDA_URL}/${MINICONDA_FILE}"
      bash $MINICONDA_FILE -bp $HOME/miniconda3
    - source $HOME/miniconda3/bin/activate root
    - hash -r
    - reset_secure

before_script:
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
          export "DISPLAY=:99.0";
          sh -e /etc/init.d/xvfb start;
          sleep 3;
      fi

install:
    # unset the global CONDA_REPO_TOKEN variable because it is not needed
    # during the tests. This decreases the vulnerability
    - unset_secure
    - 'echo "backend : qt5agg" > matplotlibrc'
    - 'export MATPLOTLIBRC=`pwd`/matplotlibrc'
    - |
        echo ""
        echo "Configuring conda."
        conda config --set always_yes yes --set changeps1 no
        conda config --add channels conda-forge
        conda config --add channels chilipp
        conda update -q conda
        conda install conda-build anaconda-client conda-verify
    - if [[ $TRAVIS_TAG == "" ]]; then
        export GIT_BRANCH=$TRAVIS_BRANCH;
        conda config --add channels chilipp/label/${TRAVIS_BRANCH};
      fi
    - python ci/setup_append.py ci/conda-recipe matplotlib=${MPL_VERSION} pyqt=${QT_VERSION}
    - if [[ $USE_PIP == true ]]; then
        python -m pip install . -r ci/requirements.txt;
      fi
    - conda info -a
    - conda list
    - export PSYPLOT_REFERENCES=`python tests/get_ref_dir.py -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - export REFBRANCH=`python tests/get_ref_dir.py -b -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - git submodule update --init ${PSYPLOT_REFERENCES}
    - reset_secure

script:
    - unset_secure
    # install conda
    - if [[ $USE_PIP == true ]]; then
          pytest -v --cov=psy_maps && codecov;
      else
          conda build ci/conda-recipe --python $PYTHON_VERSION;
      fi
    - python ci/check_ref_deploy.py
    # export the pw to make it available for the deploy
    - reset_secure
    # deploy here (don't use travis deploy because it requires homebrew)
    - if [[ $DEPLOY_CONDA == "true" && $TRAVIS_PULL_REQUEST == "false" && $TRAVIS_REPO_SLUG == "Chilipp/psy-maps" ]]; then
          ci/deploy_anaconda.py;
      fi

deploy:
  - provider: script
    script: ci/update_reference_submodule.py
    skip_cleanup: true
    on:
      all_branches: true
      condition: "-e deploy_references"
  - provider: script
    script: ci/update_submodules.py
    skip_cleanup: true
    on:
      condition: "-e deploy_references"
      all_branches: true
    on:
      condition: "-e deploy_references"
      all_branches: true
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      all_branches: true
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      tags: true
