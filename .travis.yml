language: generic
env:
  global:
    - COMMIT_AUTHOR_EMAIL="philipp.sommer@unil.ch"
    - secure: "BCB8Pm2uloMjoQ42Y8iGur19Tq0O1KzepehSDrgc8HjebbUbRSJimHt6uSOUbjIE7GZe4UB9Me0mGn2g3/EpSH8LKB2WCrAK5ZSgZx+B0kejDBP/a6k+RvC6TJ6YJOuxKcHpagL9jgvJfHyZlFo8RC3lxjkWqcm06tL4ImVFIBDBzxvRMAZyxXlpaIyYEJAf9mkh7rplUsR0DMFTrLI+3Kz0KVUyUTlYKLzzG8pJ6Qq5dmNHVHXa3UVK+JWTOGhizAjX9oPJhrBbSxDlk54pTMRH/LtJEMDCXBN7PtbyKnI3Wu4ayoL3eBjy0zRfRB5msFjfge7Ray5ECR8Sw5U/TARFllNnsloTbRDxoRwEEHtqTRLGR3Zk8P2WHu+Vl3YYPmAKpHWKBxuIO0cStjMDTM0rz1ySNttqM8qidky7PXs3uZ5J6t4XmsdOmI1hYYZEE3Xa5FDw0TB5y3h3+vPl3Na0E5P730/TZ9Ib6DOix3wMr7BgfMPzNA0Hcv5oORwPmqsHhhtwx4op8FF8RUj8nh/KIzSVXJauEz0+Tc1BklhY3hhqdORsdkb8FAetCP1XKMWAi2PPNNQTzbDQbNd/M+6miNE/YCSTX6S0Cv+6jhmyTNU4cQj1Tm24xsjG+i/YJTbnraKnhmQAAPtw24GQkc4e3uAFiMjUndXCxi7k4WI="
matrix:
    include:
        # linux environments
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.1
          os: linux
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.0
          os: linux
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=1.5
          os: linux
        - env:
            - PYTHON_VERSION=3.5
            - MPL_VERSION=2.0
          os: linux
        - env:
            - PYTHON_VERSION=3.5
            -  MPL_VERSION=1.5
          os: linux
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=2.1
          os: linux
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=2.0
          os: linux
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=1.5
          os: linux
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=1.4
          os: linux
        # osx environments
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.1
          os: osx
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.0
          os: osx
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=1.5
          os: osx
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=2.1
          os: osx
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=2.0
          os: osx
        - env:
            - PYTHON_VERSION=2.7
            - MPL_VERSION=1.5
          os: osx
before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      sed -i '' 's/git@github.com:/https:\/\/github.com\//' .gitmodules;
    else
      sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules;
    fi
git:
    submodules: false
install:
  # unset the global GH_REPO_TOKEN variable because it is not needed during
  # the installation process. This decreases the vulnerability
  - GH_REPO_TOKEN_SAVE=$GH_REPO_TOKEN
  - unset GH_REPO_TOKEN
  # select the os name for the conda installer
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        OS_NAME=MacOSX;
    else
        OS_NAME=Linux;
    fi
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    fi
  # make sure we use an 'innocent' default matplotlib environment
  - touch matplotlibrc
  # setup conda environment
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - pip install pyyaml  # is somehow not included in the current conda installation
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - 'ENVKEY=py"${PYTHON_VERSION}"_mpl"${MPL_VERSION}"'
  - conda env create -f tests/envs/environment_$ENVKEY.yml
  - source activate psyplot_$ENVKEY
  # checkout references
  - 'export WORK=`pwd`'
  - 'export REFDIR=`python tests/get_ref_dir.py`'
  - 'export REFBRANCH=`python tests/get_ref_dir.py -b`'
  - git submodule update --init $REFDIR
  # use latest development version
  # NOTE: Remove this when psyplot is stable enough
  - git clone "https://github.com/Chilipp/psyplot.git" -b $TRAVIS_BRANCH || git clone "https://github.com/Chilipp/psyplot.git"
  - cd psyplot && python setup.py install && cd .. && rm -rf psyplot
  # use the branch from psy-simple
  - git clone "https://github.com/Chilipp/psy-simple.git" -b $TRAVIS_BRANCH || git clone "https://github.com/Chilipp/psy-simple.git"
  - cd psy-simple && python setup.py install && cd .. && rm -rf psy-simple
  # install coveralls
  - pip install coveralls pytest-xdist pytest-cov
  # install psyplot
  - python setup.py install
  # export the environment for debugging
  - conda env export -n psyplot_$ENVKEY
  # get the number of available cores
  - 'NCORES=`python -c "import multiprocessing; print(multiprocessing.cpu_count())"`'
  # use 8 cores at maximum
  - 'export NCORES=`python -c "print(min(8, ${NCORES}))"`'
  - echo using $NCORES
  # print versions of all the important requirements
  - psyplot -aV
  # export the token to make it available for the deploy
  - export GH_REPO_TOKEN=$GH_REPO_TOKEN_SAVE

script:
  # create the necessary references
  - py.test -v --ref --cov=psy_maps && python ci/check_ref_deploy.py
  # run the tests
  - py.test -v -n $NCORES --cov-append --cov=psy_maps

after_success:
  - coveralls

deploy:
  - provider: script
    script: ci/update_reference_submodule.py
    skip_cleanup: true
    on:
      all_branches: true
      condition: "-e deploy_references"
  - provider: script
    script: ci/update_submodules.py
    skip_cleanup: true
    on:
      condition: "-e deploy_references"
      all_branches: true
