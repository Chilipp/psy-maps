language: generic
env:
  global:
    - COMMIT_AUTHOR_EMAIL="philipp.sommer@unil.ch"
    - secure: "BqB0U2QmocGapPmdN3RkUGwH+IBMNA1XS8QI2xSWcSCkqQeW7lwi9PAk/l9pqxBzPzmDZa5AAbYs+SFsY+ny1uSmkyqTP3Fk9txV9qHpwl3LX1QYhqOTHU/l6ugnoqo8qIDghPRXwluXf17WPloQTElfCTFRcbTFiEM+Qx8+Z3t3e9UOKI21YKDmekkP2R857zquhXeO/v2blvxwrljfB5VuAGja9FtAPpGGWP2/fazcF5Rn474h01eT/hsqYZF3QbcCgsF0wHvNfMBOmQaogbU50SXQdp6eEc5PislXPqZmsD70kbj23JnhH5ecUuVBQ3vKoFbF5d3n+aOCzggnBugN1tL/YwkHjHh/gC6GPPCk/ku3Azfqjym+66gaj7MJB0KB2h4mOJo1fgpkltkDT9WqJJteu2it9UkDQYsJxuWmkNC1n+FUNiJRAUKON5lKF24JpreTUz9qov4Ht8cVot564MQ0DBDQgkt6CMZ1i17d0Un4dHXTqMA+2Su+SwCZtZp/oj/Hazl81tQZxQuceqtWqv/VQGFmutZnLfOUucmNa3vO69xqVsfz+CP7lMxfRnTHPUQUHV8Eq12CUDk9BZB5AnNkrtEcU9fbbkQ4/hpmGtmY+6/Op6+LVqjI6SQsbHQx+PKSfCgNDrALFhY87AQUYIDFfHrjgS1fLsYT3aQ="
    - secure: "D3GETCxxbK7oIb0cHFNzw+gRNQxV/q2y/5J7SVK2Meas6O+1ZK3A0nMbNpsHbXs0sxDDxyNsfLz2y053i9i+4gNsSSPYkTQ9ZTR9ofkslnYeUSdvQvdc3ae6nIgdPnIrgppFs1P8jA6jPjxXXlTdDhsxwMq+Une6+r/oGxfZb79QN3kfge2qdM8MVn3k0TEFsHMc2JxnT3nfXGtVM3cdfT9m5A4comrBppXuFBm0t8rPJbhKFul941sv0sbMvbXfD8KXCk9A+X5RkQu+jPiwjDGpktVIEKfAndmbIkCmL8HuImsdKnTrXW3Bp4HeXWOz9qdvvAooqkBzLzgmD4jl/pV+ynUhUzRJuAcqPcVfDa+vtYvZb8qiBQ04Hz2N34vni81vg8v54sSlNrAJbnacY+BhjzF8ZAY5BcdTContwLc5ZHy0TmuPSPC0TSm/6wy+SvdqcICJ1MC7BYUe8Bm0NsxQ+iaSe8tHea9sR8DTD3mmk3THjpWc8e5On1Df0r2Mt6T78X8x+XqEhdQM4XNHt2CbrVctEVeSQxHOGyg5nSDY5pIyvL4AiSOA2hBILmgudDfgP5r0GeCHKfwmSRyIt63qkoq9fvwMnG2GPTkYI4yOrGdIN4NTxMj/VNCoPJHi48ZFTrFyBeJo/WO7QYG/ICBsj5u5na6xXU04723pDGw="
matrix:
    include:
        # linux environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: linux
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.0
          os: linux
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.2
          os: linux
        # osx environments
        - env:
            - PYTHON_VERSION=3.8
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.1
            - DEPLOY_CONDA=true
          os: osx
        - env:
            - PYTHON_VERSION=3.7
            - MPL_VERSION=3.0
          os: osx
        - env:
            - PYTHON_VERSION=3.6
            - MPL_VERSION=2.2
          os: osx

services:
    - xvfb

git:
    submodules: false

before_install:
    - if [[ "$TRAVIS_EVENT_TYPE" == "cron" ]]; then export DEPLOY_CONDA=false; fi
    # Remove homebrew.
    - |
      if [[ $TRAVIS_OS_NAME == "osx" ]]; then
          echo ""
          echo "Removing homebrew from Travis CI to avoid conflicts."
          curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > ~/uninstall_homebrew
          chmod +x ~/uninstall_homebrew
          ~/uninstall_homebrew -fq
          rm ~/uninstall_homebrew
      fi
    # define functions to unset and reset encrypted variables
    - function unset_secure {
          CONDA_TOKEN_SAVE=$CONDA_REPO_TOKEN;
          unset CONDA_REPO_TOKEN;
          GH_REPO_TOKEN_SAVE=$GH_REPO_TOKEN;
          unset GH_REPO_TOKEN;
          }
    - function reset_secure {
          export CONDA_REPO_TOKEN=$CONDA_TOKEN_SAVE;
          export GH_REPO_TOKEN=$GH_REPO_TOKEN_SAVE;
          }
    - unset_secure
    # increase open files limit
    - ulimit -a
    - ulimit -Sn 10000
    - ulimit -a
      # select the os name for the conda installer
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          OS_NAME=MacOSX;
      else
          OS_NAME=Linux;
      fi
    # Install Miniconda.
    - |
      echo ""
      echo "Installing a fresh version of Miniconda."
      MINICONDA_URL="https://repo.continuum.io/miniconda"
      MINICONDA_FILE="Miniconda3-latest-${OS_NAME}-x86_64.sh"
      curl -L -O "${MINICONDA_URL}/${MINICONDA_FILE}"
      bash $MINICONDA_FILE -bp $HOME/miniconda3
    - source $HOME/miniconda3/bin/activate root
    - hash -r
    - reset_secure

before_script:
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
          export "DISPLAY=:99.0";
          sh -e /etc/init.d/xvfb start;
          sleep 3;
      fi

install:
    # unset the global CONDA_REPO_TOKEN variable because it is not needed
    # during the tests. This decreases the vulnerability
    - unset_secure
    - 'echo "backend : qt5agg" > matplotlibrc'
    - 'export MATPLOTLIBRC=`pwd`/matplotlibrc'
    - |
        echo ""
        echo "Configuring conda."
        conda config --set always_yes yes --set changeps1 no
        conda config --add channels conda-forge
        conda config --add channels chilipp
        conda update -q conda
        conda install conda-build anaconda-client conda-verify
    - if [[ $TRAVIS_TAG == "" ]]; then
        export GIT_BRANCH=$TRAVIS_BRANCH;
        conda config --add channels chilipp/label/${TRAVIS_BRANCH};
      fi
    - python ci/setup_append.py ci/conda-recipe matplotlib=${MPL_VERSION} pyqt=${QT_VERSION}
    - if [[ $USE_PIP == true ]]; then
        python -m pip install . -r ci/requirements.txt;
      fi
    - conda info -a
    - conda list
    - export PSYPLOT_REFERENCES=`python tests/get_ref_dir.py -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - export REFBRANCH=`python tests/get_ref_dir.py -b -mpl ${MPL_VERSION} -py ${PYTHON_VERSION}`
    - git submodule update --init ${PSYPLOT_REFERENCES}
    - reset_secure

script:
    - unset_secure
    # install conda
    - if [[ $USE_PIP == true ]]; then
          pytest -v --cov=psy_maps && codecov;
      else
          conda build ci/conda-recipe --python $PYTHON_VERSION;
      fi
    - python ci/check_ref_deploy.py
    # export the pw to make it available for the deploy
    - reset_secure
    # deploy here (don't use travis deploy because it requires homebrew)
    - if [[ $DEPLOY_CONDA == "true" && $TRAVIS_PULL_REQUEST == "false" && $TRAVIS_REPO_SLUG == "Chilipp/psy-maps" ]]; then
          ci/deploy_anaconda.py;
      fi

deploy:
  - provider: script
    script: ci/update_reference_submodule.py
    skip_cleanup: true
    on:
      all_branches: true
      condition: "-e deploy_references"
  - provider: script
    script: ci/update_submodules.py
    skip_cleanup: true
    on:
      condition: "-e deploy_references"
      all_branches: true
    on:
      condition: "-e deploy_references"
      all_branches: true
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      all_branches: true
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      tags: true
